{"client":"Thunder Client","collectionName":"DrivenPass","dateExported":"2022-09-11T14:48:05.058Z","version":"1.1","folders":[{"_id":"4b599587-4281-4bae-a303-0009b0947150","name":"Credentials","containerId":"","created":"2022-09-09T14:47:41.752Z","sortNum":10000},{"_id":"096f2d11-cd07-49c6-abd1-357606b6b621","name":"safeNotes","containerId":"","created":"2022-09-09T16:43:25.210Z","sortNum":30000},{"_id":"876093bb-71e8-4676-a15d-f5a6a6952588","name":"wifiNetworks","containerId":"","created":"2022-09-09T18:14:12.773Z","sortNum":40000},{"_id":"f0177393-e0f3-458f-94b1-9632ee0dbebd","name":"Cards","containerId":"","created":"2022-09-09T20:07:55.532Z","sortNum":50000},{"_id":"c98a604f-ed37-4c5c-a8f7-c7fc6bb800e2","name":"Auth","containerId":"","created":"2022-09-09T15:14:56.528Z","sortNum":60000}],"requests":[{"_id":"cf4e0e8e-1406-4a95-a10b-084dfbe7451e","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"4b599587-4281-4bae-a303-0009b0947150","name":"Delete Credential by Id","url":"https://projeto19-drivenpass-farias77.herokuapp.com/credential/{credentialId}","method":"DELETE","sortNum":10000,"created":"2022-09-09T14:45:07.701Z","modified":"2022-09-11T14:41:06.467Z","headers":[{"name":"Authorization","value":"Bearer {token}"}],"params":[{"name":"credentialId","value":"","isPath":true}],"tests":[],"docs":"Rota destinada a deletar Credentials do banco de dados. Para funcionar corretamente, o usuário deve enviar o Id da Credential a ser deletada nos params da rota e um header do tipo \"Authorization\" contendo o token que foi recebido no momento do login, seguindo o formato: \n\n```json\n\n{\n  Authorization: Bearer {token}\n}\n```\n\nA request já está montada, sendo necessário apenas substituir o token na aba \"Headers\" e informar o id da credential a ser deletada por meio de query params. \n\nO usuário pode receber as seguintes responses:\n\n>* Erro por não ser um token válido (Internal Server Error -> 500)\n>* Erro por não ser o dono da credential com o id informado\n>* Erro por não existir uma credential com o id informado\n>* Em caso de sucesso, a credential será deletada do banco de dados.\n"},{"_id":"bbfb301b-fc0f-482b-9be8-cd5af331733b","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"096f2d11-cd07-49c6-abd1-357606b6b621","name":"Create SafeNote","url":"https://projeto19-drivenpass-farias77.herokuapp.com/safeNote","method":"POST","sortNum":10000,"created":"2022-09-09T16:43:14.591Z","modified":"2022-09-11T14:29:38.370Z","headers":[{"name":"Authorization","value":"Bearer {token}"}],"params":[],"body":{"type":"json","raw":"{\n  \"title\": \"um belo título com menos de 50 caracteres 234\",\n  \"note\": \"nota super secreta com menos de 1000 caracteres\"\n}","form":[]},"tests":[],"docs":"Rota destinada à criação de safeNotes, o usuário envia um title e a própria nota. Para funcionar corretamente, deve-se enviar um objeto JSON no campo body, seguindo formato a seguir: \n\n```json\n\n{\n  \"title\": \"um belo título com menos de 50 caracteres\",\n  \"note\": \"nota super secreta com menos de 1000 caracteres\"\n}\n```\n\nPara a validação do usuário que está utilizando a plataforma, também é necessário o envio de um header do tipo \"Authorization\", com valor \"Bearer {token}\", onde \"token\" é o retorno da request de login.\n\n```json\n\n{\n  Authorization: Bearer {token}\n}\n```\n\nA request já está montada, sendo necessário apenas substituir o token na aba \"Headers\". \n\nO usuário pode receber estes tipos de response: \n\n>* Erro por não ser um token válido (Internal Server Error -> 500)\n>*  Erro por inconsistências no body da request\n>*  Erro por ser um title duplicado pelo próprio usuário\n>* Em caso de sucesso, receberá a confirmação de que a safeNote foi criada \n"},{"_id":"b276caec-cf77-4a99-8aff-b3c460d4d115","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"4b599587-4281-4bae-a303-0009b0947150","name":"Get Credential by Id","url":"https://projeto19-drivenpass-farias77.herokuapp.com/credential/{credentialId}","method":"GET","sortNum":20000,"created":"2022-09-09T14:45:50.019Z","modified":"2022-09-11T14:41:28.752Z","headers":[{"name":"Authorization","value":"Bearer {token}"}],"params":[{"name":"credentialId","value":"","isPath":true}],"tests":[],"docs":"Rota destinada a buscar uma Credential pelo Id no banco de dados, para funcionar corretamente, o usuário deve enviar um Id de credencial válido como params da rota, podendo receber 3 tipos de response: \n\n>* Erro por não ser um token válido (Internal Server Error -> 500)\n> * Erro por não ser o usuário que possui a credencial\n> * Erro por não existir uma credencial com aquele Id no banco de dados\n> * Em caso de sucesso, o usuário receberá a credencial com todas as informações e a senha descriptografada\n\nPara a validação do usuário que está utilizando a plataforma, também é necessário o envio de um header do tipo \"Authorization\", com valor \"Bearer {token}\", onde \"token\" é o retorno da request de login.\n\n```json\n\n{\n  Authorization: Bearer {token}\n}\n```\n\nA request já está montada, sendo necessário apenas substituir o token na aba \"Headers\" e informar o id da credential por meio de query params. \n"},{"_id":"4bda0795-e540-4ed3-a152-0dd5f579ca88","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"4b599587-4281-4bae-a303-0009b0947150","name":"Get Credentials by UserId","url":"https://projeto19-drivenpass-farias77.herokuapp.com/credential","method":"GET","sortNum":30000,"created":"2022-09-09T14:46:16.672Z","modified":"2022-09-11T14:26:24.303Z","headers":[{"name":"Authorization","value":"Bearer {token}"}],"params":[],"tests":[],"docs":"Rota destinada a buscar todas as Credentials de um usuário, pelo Id do próprio usuário no banco de dados. Para funcionar corretamente, o usuário deve enviar o token recebido no login como header da requisição, podendo receber dois tipos de response:\n\n>* Erro por não ser um token válido (Internal Server Error -> 500)\n> * Em caso de sucesso, o usuário receberá um array com todas as suas credenciais\n\nPara a validação do usuário que está utilizando a plataforma, também é necessário o envio de um header do tipo \"Authorization\", com valor \"Bearer {token}\", onde \"token\" é o retorno da request de login.\n\n```json\n\n{\n  Authorization: Bearer {token}\n}\n```\n\nA request já está montada, sendo necessário apenas substituir o token na aba \"Headers\". \n"},{"_id":"ee16b9ab-f3b1-4bec-9c1b-909aa19b622f","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"4b599587-4281-4bae-a303-0009b0947150","name":"Create Credential","url":"https://projeto19-drivenpass-farias77.herokuapp.com/credential","method":"POST","sortNum":40000,"created":"2022-09-09T14:47:28.746Z","modified":"2022-09-11T14:22:23.993Z","headers":[{"name":"Authorization","value":"Bearer {token}"}],"params":[],"body":{"type":"json","raw":"{\n  \"url\": \"https://www.apenasumexemplo.com/\",\n  \"username\": \"teste_username\",\n  \"password\": \"1234\",\n  \"title\": \"senha super secreta\" \n}","form":[]},"tests":[],"docs":"Rota destinada à criação de Credentials, o usuário envia uma url (plataforma em que a senha será utilizada), um username (username para fazer login na plataforma desejada), a própria senha, e um title (\"rótulo\" da senha na aplicação DrivenPass, que deve ser único considerando apenas as credentials daquele usuário). Para funcionar corretamente, deve-se enviar um objeto JSON no campo body, seguindo formato a seguir: \n\n```json\n\n{\n  \"url\": \"https://www.apenasumexemplo.com/\",\n  \"username\": \"teste_username\",\n  \"password\": \"1234\",\n  \"title\": \"senha super secreta\" \n}\n```\n\nPara a validação do usuário que está utilizando a plataforma, também é necessário o envio de um header do tipo \"Authorization\", com valor \"Bearer {token}\", onde \"token\" é o retorno da request de login.\n\n```json\n\n{\n  Authorization: Bearer {token}\n}\n```\n\nA request já está montada, sendo necessário apenas substituir o token na aba \"Headers\". \n\nO usuário pode receber estes tipos de response: \n\n>* Erro por não ser um token válido (Internal Server Error -> 500)\n>*  Erro por inconsistências no body da request\n>*  Erro por ser um title duplicado pelo próprio usuário\n>* Em caso de sucesso, receberá a confirmação de que a credential foi criada \n"},{"_id":"e08d1dfe-fd1d-486b-add3-4bc3a85a4533","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"c98a604f-ed37-4c5c-a8f7-c7fc6bb800e2","name":"Sign-in","url":"https://projeto19-drivenpass-farias77.herokuapp.com/sign-in","method":"POST","sortNum":50000,"created":"2022-09-09T15:19:00.846Z","modified":"2022-09-11T14:19:22.525Z","headers":[],"params":[],"body":{"type":"json","raw":"{\n  \"email\": \"emailpoderoso@email.com\",\n  \"password\": \"senhasupersecretademaisde10digitos\"\n}","form":[]},"tests":[],"docs":"Rota destinada ao login na plataforma. Para funcionar corretamente, o usuário deve enviar um body seguindo o formato a seguir, onde \"email\" deve ser um email válido cadastrado no banco de dados e \"password\" deve ser a senha cadastrada para aquele email.\n\n```json\n{\n  \"email\": \"emailpoderoso@email.com\",\n  \"password\": \"senhasupersecretademaisde10digitos\"\n}\n```\n\nO usuário pode receber as seguintes responses:\n\n>* Erro por inconsistências no body\n>* Em caso de sucesso, será retornado o token para ser utilizado em futuras requisições, guarde com cuidado!"},{"_id":"ab166518-1e75-421e-839f-79e4cfc96969","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"c98a604f-ed37-4c5c-a8f7-c7fc6bb800e2","name":"Sign-up","url":"https://projeto19-drivenpass-farias77.herokuapp.com/sign-up","method":"POST","sortNum":60000,"created":"2022-09-09T15:22:47.273Z","modified":"2022-09-11T14:19:03.482Z","headers":[],"params":[],"body":{"type":"json","raw":"{\n  \"email\": \"emailpoderoso2@email.com\",\n  \"password\": \"senhasupersecretademaisde10digitos\"\n}","form":[]},"tests":[],"docs":"Rota destinada a criar um novo usuário na plataforma. Para funcionar corretamente, o usuário deve enviar um body com o formato a seguir, onde \"email\" deve ser um email válido ainda não cadastrado no banco de dados e \"password\" deve ser uma string com pelo menos 10 dígitos.\n\n```json\n{\n  \"email\": \"emailpoderoso@email.com\",\n  \"password\": \"senhasupersecretademaisde10digitos\"\n}\n```\n\nO usuário pode receber as seguintes responses:\n\n>* Erro por inconsistências no body\n>* Em caso de sucesso, será cadastrado um novo usuário com o email e a senha passados pelo body da requisição."},{"_id":"8dcc0ecf-b94a-4008-b09a-ee28c1e874f8","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"096f2d11-cd07-49c6-abd1-357606b6b621","name":"Get safeNotes by UserId","url":"https://projeto19-drivenpass-farias77.herokuapp.com/safeNote","method":"GET","sortNum":80000,"created":"2022-09-09T16:46:12.645Z","modified":"2022-09-11T14:30:36.303Z","headers":[{"name":"Authorization","value":"Bearer {token}"}],"params":[],"tests":[],"docs":"Rota destinada a buscar todas as safeNotes de um usuário, pelo Id do próprio usuário no banco de dados. Para funcionar corretamente, o usuário deve enviar o token recebido no login como header da requisição, podendo receber dois tipos de response:\n\n>* Erro por não ser um token válido (Internal Server Error -> 500)\n> * Em caso de sucesso, o usuário receberá um array com todas as suas safeNotes\n\nPara a validação do usuário que está utilizando a plataforma, também é necessário o envio de um header do tipo \"Authorization\", com valor \"Bearer {token}\", onde \"token\" é o retorno da request de login.\n\n```json\n\n{\n  Authorization: Bearer {token}\n}\n```\n\nA request já está montada, sendo necessário apenas substituir o token na aba \"Headers\". "},{"_id":"60d5e6e5-0b1f-4957-9dec-a312667fcfc6","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"096f2d11-cd07-49c6-abd1-357606b6b621","name":"Get safeNoteById","url":"https://projeto19-drivenpass-farias77.herokuapp.com/safeNote/{safeNoteId}","method":"GET","sortNum":90000,"created":"2022-09-09T17:01:36.539Z","modified":"2022-09-11T14:40:22.601Z","headers":[{"name":"Authorization","value":"Bearer {token}"}],"params":[{"name":"safeNoteId","value":"","isPath":true}],"tests":[],"docs":"Rota destinada a buscar uma safeNote pelo Id no banco de dados, para funcionar corretamente, o usuário deve enviar um Id de safeNote válido como params da rota, podendo receber esses tipos de response: \n\n>*  Erro por não ser um token válido (Internal Server Error -> 500)\n> * Erro por não ser o usuário que possui a safeNote\n> * Erro por não existir uma safeNote com aquele Id no banco de dados\n> * Em caso de sucesso, o usuário receberá a safeNote com todas as informações descriptografadas\n\nPara a validação do usuário que está utilizando a plataforma, também é necessário o envio de um header do tipo \"Authorization\", com valor \"Bearer {token}\", onde \"token\" é o retorno da request de login.\n\n```json\n\n{\n  Authorization: Bearer {token}\n}\n```\n\nA request já está montada, sendo necessário apenas substituir o token na aba \"Headers\" e informar o id da safeNote por meio de query params. "},{"_id":"cfe44dc6-6ed8-4fc8-a175-21947237e77b","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"096f2d11-cd07-49c6-abd1-357606b6b621","name":"Delete safeNote by Id","url":"https://projeto19-drivenpass-farias77.herokuapp.com/safeNote/{safeNoteId}","method":"DELETE","sortNum":100000,"created":"2022-09-09T17:22:32.109Z","modified":"2022-09-11T14:47:29.221Z","headers":[{"name":"Authorization","value":"Bearer {token}"}],"params":[{"name":"safeNoteId","value":"1","isPath":true}],"tests":[],"docs":"Rota destinada a deletar safeNotes do banco de dados. Para funcionar corretamente, o usuário deve enviar o Id da safeNote a ser deletada nos params da rota e um header do tipo \"Authorization\" contendo o token que foi recebido no momento do login, seguindo o formato: \n\n```json\n\n{\n  Authorization: Bearer {token}\n}\n```\n\nA request já está montada, sendo necessário apenas substituir o token na aba \"Headers\" e informar o id da safeNote a ser deletada por query params. \n\nO usuário pode receber as seguintes responses:\n\n>* Erro por não ser um token válido (Internal Server Error -> 500)\n>* Erro por não ser o dono da safeNote com o id informado\n>* Erro por não existir uma safeNote com o id informado\n>* Em caso de sucesso, a safeNote será deletada do banco de dados."},{"_id":"ca3e1175-aa18-42d7-a038-c7f9ac3a11cc","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"876093bb-71e8-4676-a15d-f5a6a6952588","name":"Create wifiNetwork","url":"https://projeto19-drivenpass-farias77.herokuapp.com/wifi","method":"POST","sortNum":110000,"created":"2022-09-09T18:16:24.730Z","modified":"2022-09-11T14:35:04.789Z","headers":[{"name":"Authorization","value":"Bearer {token}"}],"params":[],"body":{"type":"json","raw":"{\n  \"title\": \"Wifi do vizinho\",\n  \"networkName\": \"MEUWIFI 5G\",\n  \"password\": \"senha super secreta\"\n}","form":[]},"tests":[],"docs":"Rota destinada à criação de wifiNetworks, o usuário envia o nome da rede, a senha e um título para identificar a rede com maior facilidade. Para funcionar corretamente, deve-se enviar um objeto JSON no campo body, seguindo formato a seguir: \n\n```json\n\n{\n  \"networkName\": \"MEUWIFI 5G\",\n  \"title\": \"Wifi do vizinho\",\n  \"password\": \"senha super secreta\"\n}\n```\n\nPara a validação do usuário que está utilizando a plataforma, também é necessário o envio de um header do tipo \"Authorization\", com valor \"Bearer {token}\", onde \"token\" é o retorno da request de login.\n\n```json\n\n{\n  Authorization: Bearer {token}\n}\n```\n\nA request já está montada, sendo necessário apenas substituir o token na aba \"Headers\". \n\nO usuário pode receber estes tipos de response: \n\n>*  Erro por não ser um token válido (Internal Server Error -> 500)\n>*  Erro por inconsistências no body da request\n>*  Em caso de sucesso, receberá a confirmação de que a wifiNetwork foi criada \n"},{"_id":"71edffb4-ce04-4deb-a58d-7b20705baa2b","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"876093bb-71e8-4676-a15d-f5a6a6952588","name":"Get wifiNetworks by userId","url":"https://projeto19-drivenpass-farias77.herokuapp.com/wifi","method":"GET","sortNum":120000,"created":"2022-09-09T18:23:23.067Z","modified":"2022-09-11T14:35:50.767Z","headers":[{"name":"Authorization","value":"Bearer {token}"}],"params":[],"tests":[],"docs":"Rota destinada a buscar todas as wifiNetworks de um usuário, pelo Id do próprio usuário no banco de dados. Para funcionar corretamente, o usuário deve enviar o token recebido no login como header da requisição, podendo receber dois tipos de response:\n\n>* Erro por não ser um token válido (Internal Server Error -> 500)\n> * Em caso de sucesso, o usuário receberá um array com todas as suas wifiNetworks\n\nPara a validação do usuário que está utilizando a plataforma, também é necessário o envio de um header do tipo \"Authorization\", com valor \"Bearer {token}\", onde \"token\" é o retorno da request de login.\n\n```json\n\n{\n  Authorization: Bearer {token}\n}\n```\n\nA request já está montada, sendo necessário apenas substituir o token na aba \"Headers\". "},{"_id":"7bf302a3-a78c-4d25-94cb-c061e828e951","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"876093bb-71e8-4676-a15d-f5a6a6952588","name":"Get wifiNetwork by id","url":"https://projeto19-drivenpass-farias77.herokuapp.com/wifi/{wifiId}","method":"GET","sortNum":130000,"created":"2022-09-09T18:30:02.868Z","modified":"2022-09-11T14:39:37.709Z","headers":[{"name":"Authorization","value":"Bearer {token}"}],"params":[{"name":"wifiId","value":"","isPath":true}],"tests":[],"docs":"Rota destinada a buscar uma wifiNetwork pelo Id no banco de dados, para funcionar corretamente, o usuário deve enviar um Id de wifiNetwork válido como params da rota, podendo receber os tipos de response: \n\n>* Erro por não ser um token válido (Internal Server Error -> 500)\n> * Erro por não ser o usuário que possui a wifiNetwork\n> * Erro por não existir uma wifiNetwork com aquele Id no banco de dados\n> * Em caso de sucesso, o usuário receberá a wifiNetwork com todas as informações e a senha descriptografada\n\nPara a validação do usuário que está utilizando a plataforma, também é necessário o envio de um header do tipo \"Authorization\", com valor \"Bearer {token}\", onde \"token\" é o retorno da request de login.\n\n```json\n\n{\n  Authorization: Bearer {token}\n}\n```\n\nA request já está montada, sendo necessário apenas substituir o token na aba \"Headers\" e informar o id do wifi por query params. "},{"_id":"2bc2b478-2ae9-437d-941f-78173cbeaa92","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"876093bb-71e8-4676-a15d-f5a6a6952588","name":"Delete wifiNetwork by id","url":"https://projeto19-drivenpass-farias77.herokuapp.com/wifi/{wifiId}","method":"DELETE","sortNum":140000,"created":"2022-09-09T18:40:34.907Z","modified":"2022-09-11T14:39:10.925Z","headers":[{"name":"Authorization","value":"Bearer {token}"}],"params":[{"name":"wifiId","value":"","isPath":true}],"tests":[],"docs":"Rota destinada a deletar wifiNetworks do banco de dados. Para funcionar corretamente, o usuário deve enviar o Id da wifiNetwork a ser deletada nos params da rota e um header do tipo \"Authorization\" contendo o token que foi recebido no momento do login, seguindo o formato: \n\n```json\n\n{\n  Authorization: Bearer {token}\n}\n```\n\nA request já está montada, sendo necessário apenas substituir o token na aba \"Headers\" e informar por params qual o wifi a ser deletado.  \n\nO usuário pode receber as seguintes responses:\n\n>* Erro por não ser um token válido (Internal Server Error -> 500)\n>* Erro por não ser o dono da wifiNetwork com o id informado\n>* Erro por não existir uma wifiNetwork com o id informado\n>* Em caso de sucesso, a wifiNetwork será deletada do banco de dados."},{"_id":"28347ca3-6bab-4436-a006-c90c762eb207","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"f0177393-e0f3-458f-94b1-9632ee0dbebd","name":"Create Card","url":"https://projeto19-drivenpass-farias77.herokuapp.com/card","method":"POST","sortNum":150000,"created":"2022-09-09T20:08:14.428Z","modified":"2022-09-11T14:43:10.012Z","headers":[{"name":"Authorization","value":"Bearer {token}"}],"params":[],"body":{"type":"json","raw":"{\n  \"cardNumber\": \"123456789\",\n  \"cardHolderName\": \"Fulano de tal\",\n  \"securityCode\": \"123\",\n  \"expirationDate\": \"11/27\",\n  \"password\": \"123\",\n  \"isVirtual\": false,\n  \"type\": \"both\",\n  \"title\": \"título do cartão\"\n}","form":[]},"tests":[],"docs":"Rota destinada à criação de Cards, o usuário envia uma . Para funcionar corretamente, deve-se enviar um objeto JSON no campo body, seguindo formato a seguir: \n\n```json\n\n{\n  \"cardNumber\": \"123456789\",\n  \"cardHolderName\": \"Fulano de tal\",\n  \"securityCode\": \"123\",\n  \"expirationDate\": \"12/27\",\n  \"password\": \"123\",\n  \"isVirtual\": false,\n  \"type\": \"both\",\n  \"title\": \"título do cartão\"\n}\n```\n\nPara a validação do usuário que está utilizando a plataforma, também é necessário o envio de um header do tipo \"Authorization\", com valor \"Bearer {token}\", onde \"token\" é o retorno da request de login.\n\n```json\n\n{\n  Authorization: Bearer {token}\n}\n```\n\nA request já está montada, sendo necessário apenas substituir o token na aba \"Headers\". \n\nO usuário pode receber estes tipos de response: \n\n>* Erro por não ser um token válido (Internal Server Error -> 500)\n>*  Erro por inconsistências no body da request\n>*  Erro por ser um title duplicado pelo próprio usuário\n>* Em caso de sucesso, receberá a confirmação de que o card foi criado\n"},{"_id":"4ed874bc-9236-4fe0-af22-d9035ebb4745","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"f0177393-e0f3-458f-94b1-9632ee0dbebd","name":"Get Cards by UserId","url":"https://projeto19-drivenpass-farias77.herokuapp.com/card","method":"GET","sortNum":160000,"created":"2022-09-09T20:10:35.687Z","modified":"2022-09-11T14:44:17.221Z","headers":[{"name":"Authorization","value":"Bearer {token}"}],"params":[],"tests":[],"docs":"Rota destinada a buscar todas os Cards de um usuário, pelo Id do próprio usuário no banco de dados. Para funcionar corretamente, o usuário deve enviar o token recebido no login como header da requisição, podendo receber dois tipos de response:\n\n>* Erro por não ser um token válido (Internal Server Error -> 500)\n> * Em caso de sucesso, o usuário receberá um array com todas os seus cards\n\nPara a validação do usuário que está utilizando a plataforma, também é necessário o envio de um header do tipo \"Authorization\", com valor \"Bearer {token}\", onde \"token\" é o retorno da request de login.\n\n```json\n\n{\n  Authorization: Bearer {token}\n}\n```\n\nA request já está montada, sendo necessário apenas substituir o token na aba \"Headers\". "},{"_id":"28757905-c5db-4e97-9888-78b841005e1d","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"f0177393-e0f3-458f-94b1-9632ee0dbebd","name":"Delete card by id","url":"https://projeto19-drivenpass-farias77.herokuapp.com/card/{cardId}","method":"DELETE","sortNum":170000,"created":"2022-09-09T20:23:29.607Z","modified":"2022-09-11T14:46:20.715Z","headers":[{"name":"Authorization","value":"Bearer {token}"}],"params":[{"name":"cardId","value":"5","isPath":true}],"tests":[],"docs":"Rota destinada a deletar Cards do banco de dados. Para funcionar corretamente, o usuário deve enviar o Id do Card a ser deletado nos params da rota e um header do tipo \"Authorization\" contendo o token que foi recebido no momento do login, seguindo o formato: \n\n```json\n\n{\n  Authorization: Bearer {token}\n}\n```\n\nA request já está montada, sendo necessário apenas substituir o token na aba \"Headers\". \n\nO usuário pode receber as seguintes responses:\n\n>* Erro por não ser um token válido (Internal Server Error -> 500)\n>* Erro por não ser o dono do card com o id informado\n>* Erro por não existir um card com o id informado\n>* Em caso de sucesso, o card será deletado do banco de dados."},{"_id":"feaaaa48-52ed-4b80-9bee-22148f33c694","colId":"2c8fd24f-8c64-43e3-a624-f04713a28d70","containerId":"f0177393-e0f3-458f-94b1-9632ee0dbebd","name":"Get card by id","url":"https://projeto19-drivenpass-farias77.herokuapp.com/card/{cardId}","method":"GET","sortNum":180000,"created":"2022-09-09T20:24:48.484Z","modified":"2022-09-11T14:45:43.980Z","headers":[{"name":"Authorization","value":"Bearer {token}"}],"params":[{"name":"cardId","value":"","isPath":true}],"tests":[],"docs":"Rota destinada a buscar um card pelo Id no banco de dados, para funcionar corretamente, o usuário deve enviar um Id de card válido como params da rota, podendo receber esses tipos de response: \n\n>* Erro por não ser um token válido (Internal Server Error -> 500)\n> * Erro por não ser o usuário que possui o card\n> * Erro por não existir um card com aquele Id no banco de dados\n> * Em caso de sucesso, o usuário receberá o card com todas as informações descriptografadas\n\nPara a validação do usuário que está utilizando a plataforma, também é necessário o envio de um header do tipo \"Authorization\", com valor \"Bearer {token}\", onde \"token\" é o retorno da request de login.\n\n```json\n\n{\n  Authorization: Bearer {token}\n}\n```\n\nA request já está montada, sendo necessário apenas substituir o token na aba \"Headers\" e informar o id do card por meio de query params. \n"}]}
